/*
 * AvailPackages.java
 *
 * Created on July 19, 2002, 7:42 AM
 */

package com.maxis.panel;

import com.csgsystems.igpa.utils.ContextFinder;
import com.csgsystems.igpa.controls.models.*;
import com.csgsystems.localization.ResourceManager;

import javax.swing.event.*;
import javax.swing.tree.*;

import com.csgsystems.domain.framework.*;
import com.csgsystems.domain.framework.businessobject.*;
import com.csgsystems.domain.framework.context.*;
import com.csgsystems.domain.framework.criteria.*;
import com.csgsystems.domain.arbor.order.*;
import com.csgsystems.domain.arbor.utilities.DomainUtility;

/**
 *
 * @author  prev01
 */
public class AggrPackageAvailable extends javax.swing.JPanel implements TreeSelectionListener {

    /**
     *  Instance of the ContextFinder utility class, which can recursively
     *  search up the component hierarchy for an ICSGContextForm, and then
     *  retrieve its context (cached for later use).
     */
    private ContextFinder ctxFinder = new ContextFinder(this);

    protected static final String packageTreeDefinition = "<?xml version=\"1.0\"?>" +
                   "<csg-tree>" +
                       "<node>" +
                         "<label static=\"" + ResourceManager.getString("AggrPackageAvailable.text.PackageDefinitions") + "\" />" +
                         "<children>" +
                           "<data-set name=\"PackageGroupList\" subtype=\"Account\">" +
                             "<node>" +
                               "<label column-name=\"DisplayValue\" />" +
                               "<children>" +
                                 "<data-set name=\"PackageDefinitionList\" subtype=\"PackageGroup\">" +
                                   "<node>" +
                                     "<label column-name=\"DisplayValue\" />" +
                                   "</node>" +
                                 "</data-set>" +
                               "</children>" +
                             "</node>" +
                           "</data-set>" +
                         "</children>" +
                       "</node>" +
                   "</csg-tree>";

    /** Creates new form AvailPackages */


    // Indicator for Packages with only AccountLevel components.
    private boolean m_CanDisplayWithOnlyAccountLevel = true;
    // Indicator for Packages with only ServiceLevel components.
    private boolean m_CanDisplayWithOnlyServiceLevel = true;
    // Indicator for Packages with Required ServiceLevel components.
    private boolean m_CanDisplayWithRequiredServiceLevel = true;


    public AggrPackageAvailable() {
        initComponents();

        // Setup the Package Tree definition        
        treePackage.setModelInfo(packageTreeDefinition);
        treePackage.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        treePackage.addTreeSelectionListener(this);
    }

    public void addHyperlinkListener(javax.swing.event.HyperlinkListener listener) {
        velAvailableComponents.addHyperlinkListener(listener);    
    }

    void setCanDisplayWithOnlyAccountLevel(boolean indicator) {
        // Indicate that Packages with only AccountLevel components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithOnlyAccountLevel = indicator;
    }

    void setCanDisplayWithOnlyServiceLevel(boolean indicator) {
        // Indicate that Packages with only ServiceLevel components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithOnlyServiceLevel = indicator;
    }

    void setCanDisplayWithRequiredServiceLevel(boolean indicator) {
        // Indicate that Packages with Required ServiceLevel Components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithRequiredServiceLevel = indicator;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        spnlAvailable = new javax.swing.JSplitPane();
        spPackage = new javax.swing.JScrollPane();
        treePackage = new com.csgsystems.igpa.controls.CSGCollectionTree();
        velAvailableComponents = new com.csgsystems.igpa.controls.CSGVelocityHTMLEP();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(645, 235));
        spnlAvailable.setBorder(null);
        spnlAvailable.setDividerLocation(475);
        spnlAvailable.setDividerSize(5);
        spnlAvailable.setMinimumSize(new java.awt.Dimension(20, 20));
        spnlAvailable.setPreferredSize(new java.awt.Dimension(20, 20));
        treePackage.setDomainName("Account");
        spPackage.setViewportView(treePackage);

        spnlAvailable.setLeftComponent(spPackage);

        velAvailableComponents.setBorder(null);
        velAvailableComponents.setPreferredSize(new java.awt.Dimension(50, 50));
        velAvailableComponents.setVelocityTemplateUri("template/PackageAvailableComponents.vm");
        velAvailableComponents.setAutoscrolls(true);
        spnlAvailable.setRightComponent(velAvailableComponents);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(spnlAvailable, gridBagConstraints);

    }//GEN-END:initComponents

    public void valueChanged(javax.swing.event.TreeSelectionEvent treeSelectionEvent) {
        TreePath treePath = treeSelectionEvent.getNewLeadSelectionPath();
        if (treePath != null && treePath.getPathCount() == 3) {
            TreePath selectedPath = treePackage.getSelectionPath();
            if (selectedPath != null) {
                CollectionTreeNode node = (CollectionTreeNode) selectedPath.getLastPathComponent();
                if (node != null) {
                    IPersistentObject pTargetDom = node.getObject();
                    if (pTargetDom == null) {
                        System.out.println("Could not Get ProductPackage from Tree");
                    } else {
        
                        // Create Package Component collection
                        IPersistentCollection packageComponentDefList = (IPersistentCollection) PersistentObjectFactory.getFactory().createNew("PackageComponentDefList", "AvailablePackageComponents");
            
                        // Create search parameter
                        java.util.HashMap params = new java.util.HashMap();
                        QueryCriteria qc = new QueryCriteria();
                        qc.setFilterCriteria(FilterCriteria.createEquals(pTargetDom.getAttributeData("PackageId")));
                        params.put("PackageId", qc);
            
                        DomainUtility.setLanguageCodeFilter(params);

                        IPersistentObject pOrder = OrderManager.getInstance().getCurrentOrder();
                        if (pOrder != null) {
                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createLessThan(pOrder.getAttributeData("EffectiveDate")));
                            params.put("PackageActiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createGreaterThanEqual(pOrder.getAttributeData("EffectiveDate")));
                            qc.addFilterCriteria(FilterCriteria.createIsNull());
                            params.put("PackageInactiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createLessThan(pOrder.getAttributeData("EffectiveDate")));
                            params.put("ActiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createGreaterThanEqual(pOrder.getAttributeData("EffectiveDate")));
                            qc.addFilterCriteria(FilterCriteria.createIsNull());
                            params.put("InactiveDt", qc);
                        }

                        qc = new QueryCriteria();
                        qc.setSortCriteria(new SortCriteria((short)0, true)); // Ascending sort
                        params.put("DisplayValue", qc);
                        
                        packageComponentDefList.setSearchParameters(params);
                        packageComponentDefList.reset();

                        // This indicates if there are ONLY AccountLevel components within this package          
                        boolean isAccountLevelOnly = true;
                        // This indicates if there are ONLY ServiceLevel components within this package          
                        boolean isServiceLevelOnly = true;
                        // This indicates if there are Required ServiceLevel components within this package          
                        boolean foundRequiredServiceLevel = false;

                        // If we can display everything, don't bother with this checking.  
                        if (!m_CanDisplayWithOnlyAccountLevel || !m_CanDisplayWithRequiredServiceLevel) {
                  
                            int count = packageComponentDefList.getCount();
                            for (int i=0; i<count; i++) {
                                IPersistentObject packageComponentDef = packageComponentDefList.getAt(i);
                                if (packageComponentDef != null) {
                                    int levelCode = packageComponentDef.getAttributeDataAsInteger("ComponentLevel");
                                    if (levelCode == 2) {
                                        // This package has a ServiceLevel only component within it,
                                        // therefore it is not an AccountLevel Only Package
                                        isAccountLevelOnly = false;

                                        // Check the Required ServiceLevel components
                                        int minRequired = packageComponentDef.getAttributeDataAsInteger("MinimumRequired");
                                        if (minRequired > 0 && !m_CanDisplayWithRequiredServiceLevel) {
                                            // This ServiceLevel component is Required but we're not supposed to
                                            // show Package Components with RequiredLevel components, so don't display any.
                                            foundRequiredServiceLevel = true;
                                        }
                                    } else {
                                        // This package has an AccountLevel component within it,
                                        // therefore it is not a ServiceLevel Only Package
                                        isServiceLevelOnly = false;
                                    }
                                }
                            }
                        }
            
                        IContext ctx = ctxFinder.findContext();
                        if (ctx != null) {
                            // Check to see if we can display Components for the Package that only have AccountLevel Components
                            // If we can't, then see if this is a Package that has only AccountLevel components and don't display if it is.
                            // Also, if we are not supposed to display Required ServiceLevel components, make sure there are none in the Package.
                            if ((m_CanDisplayWithOnlyAccountLevel && m_CanDisplayWithRequiredServiceLevel) ||
                                (!isServiceLevelOnly && !m_CanDisplayWithRequiredServiceLevel && !foundRequiredServiceLevel) ||
                                (!m_CanDisplayWithOnlyAccountLevel && !isAccountLevelOnly)) {
                                ctx.addTopic((IPersistentObject)packageComponentDefList);
                            } else {
                                ctx.removeTopic((IPersistentObject)packageComponentDefList);
                            }
                        }

                        
                        // Set Required Components as IsSelected in the collection on the context
                        // so that these components will get added for sure.
                        int count = packageComponentDefList.getCount();
                        for (int i=0; i<count; i++) {
                            IPersistentObject packageComponentDef = packageComponentDefList.getAt(i);
                            if (packageComponentDef != null && packageComponentDef.getAttributeDataAsInteger("MinimumRequired") > 0) {
                                packageComponentDef.setAttributeDataAsBoolean("IsSelected", true);
                            }
                        }

                        velAvailableComponents.initializeControl();
                    }
                }
            }
        } else {
            IContext ctx = ctxFinder.findContext();
            if (ctx != null) {
                IPersistentCollection packageComponentDefList = ctx.getCollection("PackageComponentDefList", "AvailablePackageComponents");
                if (packageComponentDefList != null) {
                    ctx.removeTopic((IPersistentObject)packageComponentDefList);
                    velAvailableComponents.initializeControl();
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane spPackage;
    private javax.swing.JSplitPane spnlAvailable;
    protected com.csgsystems.igpa.controls.CSGCollectionTree treePackage;
    private com.csgsystems.igpa.controls.CSGVelocityHTMLEP velAvailableComponents;
    // End of variables declaration//GEN-END:variables
}
