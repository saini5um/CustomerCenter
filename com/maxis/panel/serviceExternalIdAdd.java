/*
 * serviceExternalIdAdd.java
 *
 * Created on October 3, 2002, 9:53 AM
 */

package com.maxis.panel;

import com.csgsystems.igpa.utils.ContextFinder;
import com.csgsystems.domain.framework.businessobject.*;
import com.csgsystems.domain.framework.context.*;

import org.apache.commons.logging.*;
import com.csgsystems.igpa.forms.ContextFormEvent;
import com.csgsystems.igpa.forms.ContextFormListener;
import com.csgsystems.igpa.controls.CSGVelocityHTMLEP;
import javax.swing.event.*;
import java.util.*;
import com.csgsystems.bp.controls.models.OrderableObjectCellRenderer;


/**
 *
 * @author  prev01
 */
public class serviceExternalIdAdd extends AbstractHTMLPanel implements ContextFormListener {
    
    private static Log log = null;
    
    protected IPersistentObject serviceExId = null;

    static {
        try {
            log = LogFactory.getLog(ChangeAccountLevelItems.class);
        } catch (Exception ex) {}
    }

    /**
     *  Instance of the ContextFinder utility class, which can recursively
     *  search up the component hierarchy for an ICSGContextForm, and then
     *  retrieve its context (cached for later use).
     */
    private ContextFinder ctxFinder = new ContextFinder(this);

    /** Creates new form serviceExternalIdAdd */
    public serviceExternalIdAdd() {
       
        initComponents();
        serviceExIdHTMLControl.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt){
                if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED){
                    String url = evt.getURL().toString();
                    hyperlinkClick(url, serviceExIdHTMLControl);
                }
            }
        });

        OrderableObjectCellRenderer cellRenderer = new OrderableObjectCellRenderer();
        //ServiceExternalIdGrid.setDefaultRenderer(Object.class, cellRenderer);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        cSGLabel1 = new com.csgsystems.igpa.controls.CSGLabel();
        sourceLbl = new com.csgsystems.igpa.controls.CSGLabel();
        ExternalIdValueEdit = new com.csgsystems.igpa.controls.CSGEdit();
        startDateTimeLbl = new com.csgsystems.igpa.controls.CSGLabel();
        ExternalIdStart = new com.csgsystems.igpa.controls.CSGDateEdit();
        ExternalIdStop = new com.csgsystems.igpa.controls.CSGDateEdit();
        endDateTimeLbl = new com.csgsystems.igpa.controls.CSGLabel();
        endDateTimeLbl1 = new com.csgsystems.igpa.controls.CSGLabel();
        chkCurrent = new com.csgsystems.igpa.controls.CSGCheckBox();
        btnAdd = new com.csgsystems.igpa.controls.CSGButton();
        ccbExternalIdTypeList = new com.csgsystems.igpa.controls.CSGCollectionComboBox();
        serviceExIdHTMLControl = new com.csgsystems.igpa.controls.CSGVelocityHTMLEP();

        setLayout(null);

        setPreferredSize(new java.awt.Dimension(635, 360));
        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel1.setMinimumSize(new java.awt.Dimension(615, 125));
        jPanel1.setPreferredSize(new java.awt.Dimension(615, 125));
        cSGLabel1.setLocalizationKey("serviceExternalIdAdd.lblType");
        jPanel1.add(cSGLabel1);
        cSGLabel1.setBounds(10, 10, 120, 20);

        sourceLbl.setLocalizationKey("serviceExternalIdAdd.lblIdentifier");
        jPanel1.add(sourceLbl);
        sourceLbl.setBounds(10, 35, 120, 20);

        ExternalIdValueEdit.setAttributeName("ServiceExternalId");
        ExternalIdValueEdit.setDomainName("CustomerIdEquipMap");
        ExternalIdValueEdit.setNextFocusableComponent(chkCurrent);
        jPanel1.add(ExternalIdValueEdit);
        ExternalIdValueEdit.setBounds(130, 35, 150, 20);

        startDateTimeLbl.setLocalizationKey("serviceExternalIdAdd.lblStartDateTime");
        jPanel1.add(startDateTimeLbl);
        startDateTimeLbl.setBounds(325, 10, 120, 20);

        ExternalIdStart.setAttributeName("ActiveDate");
        ExternalIdStart.setDomainName("CustomerIdEquipMap");
        ExternalIdStart.setNextFocusableComponent(ExternalIdStop);
        jPanel1.add(ExternalIdStart);
        ExternalIdStart.setBounds(445, 10, 150, 20);

        ExternalIdStop.setAttributeName("InactiveDate");
        ExternalIdStop.setDomainName("CustomerIdEquipMap");
        ExternalIdStop.setNextFocusableComponent(btnAdd);
        jPanel1.add(ExternalIdStop);
        ExternalIdStop.setBounds(445, 35, 150, 20);

        endDateTimeLbl.setLocalizationKey("serviceExternalIdAdd.lblEndDateTime");
        jPanel1.add(endDateTimeLbl);
        endDateTimeLbl.setBounds(325, 35, 120, 20);

        endDateTimeLbl1.setLocalizationKey("serviceExternalIdAdd.lblCurrent");
        jPanel1.add(endDateTimeLbl1);
        endDateTimeLbl1.setBounds(10, 60, 120, 20);

        chkCurrent.setSelected(true);
        chkCurrent.setAttributeName("IsCurrent");
        chkCurrent.setDomainName("CustomerIdEquipMap");
        chkCurrent.setNextFocusableComponent(ExternalIdStart);
        jPanel1.add(chkCurrent);
        chkCurrent.setBounds(130, 60, 20, 20);

        btnAdd.setLocalizationKey("serviceExternalIdAdd.btnAdd");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jPanel1.add(btnAdd);
        btnAdd.setBounds(505, 90, 90, 25);

        ccbExternalIdTypeList.setAttributeName("ServiceExternalIdType");
        ccbExternalIdTypeList.setDomainName("CustomerIdEquipMap");
        ccbExternalIdTypeList.setEnumCollectionName("ExternalIdTypeList");
        ccbExternalIdTypeList.setEnumCollectionSubtype("CustomerIdEquipMap");
        ccbExternalIdTypeList.setEnumDisplayAttributeName("DisplayValue");
        ccbExternalIdTypeList.setEnumKeyAttributeName("ExternalIdType");
        ccbExternalIdTypeList.setNextFocusableComponent(ExternalIdValueEdit);
        ccbExternalIdTypeList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ccbExternalIdTypeListActionPerformed(evt);
            }
        });

        jPanel1.add(ccbExternalIdTypeList);
        ccbExternalIdTypeList.setBounds(130, 10, 150, 20);

        add(jPanel1);
        jPanel1.setBounds(10, 10, 615, 125);

        serviceExIdHTMLControl.setVelocityTemplateUri("template/ServiceExIdAdd.vm");
        add(serviceExIdHTMLControl);
        serviceExIdHTMLControl.setBounds(10, 140, 615, 210);

    }
    // </editor-fold>//GEN-END:initComponents

    private void ccbExternalIdTypeListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ccbExternalIdTypeListActionPerformed
// TODO add your handling code here:
       ExternalIdValueEdit.initializeControl(); 
    }//GEN-LAST:event_ccbExternalIdTypeListActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        IContext ctx = ctxFinder.findContext();       
        if (ctx.sendMessage("addCustomerIdEquipMap", null)) {
            ccbExternalIdTypeList.initializeControl();
            serviceExIdHTMLControl.initializeControl();
            ExternalIdValueEdit.initializeControl();
            ExternalIdStart.initializeControl();
            ExternalIdStop.initializeControl();
            
            setExternalIdTypeDefault();
        } else {
            ctxFinder.displayHTMLError(ctx.getError());
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void hyperlinkClick(String url, CSGVelocityHTMLEP control) {  
       HashMap params = parseURLtoMap(url);
       // index of selected object within collection
       String ind = (String) params.get("index");
       int index = -1;
       if (ind != null) {
           index = Integer.parseInt(ind);
       } else {
           log.error("Invalid CustomerIdEquipMapList index", null);
           return;
      }
      
       IContext context = ctxFinder.findContext();
       IPersistentCollection serviceExIdList = context.getCollection("CustomerIdEquipMapList", "ServiceExternalIdAdd");
       serviceExIdList.remove(index);
       
       serviceExIdHTMLControl.initializeControl();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.csgsystems.igpa.controls.CSGDateEdit ExternalIdStart;
    private com.csgsystems.igpa.controls.CSGDateEdit ExternalIdStop;
    private com.csgsystems.igpa.controls.CSGEdit ExternalIdValueEdit;
    private com.csgsystems.igpa.controls.CSGButton btnAdd;
    private com.csgsystems.igpa.controls.CSGLabel cSGLabel1;
    private com.csgsystems.igpa.controls.CSGCollectionComboBox ccbExternalIdTypeList;
    private com.csgsystems.igpa.controls.CSGCheckBox chkCurrent;
    private com.csgsystems.igpa.controls.CSGLabel endDateTimeLbl;
    private com.csgsystems.igpa.controls.CSGLabel endDateTimeLbl1;
    private javax.swing.JPanel jPanel1;
    private com.csgsystems.igpa.controls.CSGVelocityHTMLEP serviceExIdHTMLControl;
    private com.csgsystems.igpa.controls.CSGLabel sourceLbl;
    private com.csgsystems.igpa.controls.CSGLabel startDateTimeLbl;
    // End of variables declaration//GEN-END:variables

	/* (non-Javadoc)
	 * @see com.csgsystems.igpa.forms.ContextFormListener#contextFormStateChanged(com.csgsystems.igpa.forms.ContextFormEvent)
	 */
	public void contextFormStateChanged(ContextFormEvent evt) {
        if (evt.getType() == ContextFormEvent.POST_INIT_CONTROLS ) {
            setExternalIdTypeDefault();
        }
	}
    
    private void setExternalIdTypeDefault() {
        IContext ctx = ctxFinder.findContext();
        IPersistentCollection externalIdTypeList = ctx.getCollection("ExternalIdTypeList", "CustomerIdEquipMap");
        IPersistentObject custIdEquipMap = ctx.getObject("CustomerIdEquipMap", null);
        IPersistentObject defaultExternalIdType = externalIdTypeList.findObjectWithValue("ExternalIdType", custIdEquipMap.getAttributeData("ServiceExternalIdType"));
        if (defaultExternalIdType == null) {
            externalIdTypeList.findObjectWithValue("IsDefault", Boolean.TRUE);
        }
        if (defaultExternalIdType != null) {
            int index = externalIdTypeList.findObjectIndexNoFault(defaultExternalIdType.getId());
            ccbExternalIdTypeList.setSelectedIndex(index);
        }
        
        if (externalIdTypeList.getCount() == 0) {
            custIdEquipMap.getAttribute("ServiceExternalIdType").setEmpty(true);
        }
    }
}
