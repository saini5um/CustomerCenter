/*
 * AvailPackages.java
 *
 * Created on July 19, 2002, 7:42 AM
 */

package com.maxis.panel;

import com.csgsystems.igpa.utils.ContextFinder;
import com.csgsystems.igpa.forms.ContextFormListener;
import com.csgsystems.igpa.forms.ContextFormEvent;
import com.csgsystems.igpa.controls.models.*;
import com.csgsystems.localization.ResourceManager;

import javax.swing.*;
import javax.swing.tree.*;
import java.awt.event.*;
import javax.swing.event.*;

import com.csgsystems.domain.framework.*;
import com.csgsystems.domain.framework.businessobject.*;
import com.csgsystems.domain.framework.context.*;
import com.csgsystems.domain.framework.criteria.*;
import com.csgsystems.domain.arbor.order.*;
import com.csgsystems.domain.arbor.businessobject.*;
import com.csgsystems.domain.arbor.utilities.DomainUtility;
import com.csgsystems.bopt.*;

import java.util.*;

/**
 *
 * @author  prev01
 */

public class AggrPackageCurrent extends javax.swing.JPanel implements ContextFormListener, TreeSelectionListener {

    protected boolean m_bHasBeenInitialized = false;
    protected String m_SingleEntityForPackage = null;
    
    /**
     *  Instance of the ContextFinder utility class, which can recursively
     *  search up the component hierarchy for an ICSGContextForm, and then
     *  retrieve its context (cached for later use).
     */
    private ContextFinder ctxFinder = new ContextFinder(this);

    
    // Indicator for Packages with only AccountLevel components.
    private boolean m_CanDisplayWithOnlyAccountLevel = true;
    // Indicator for Packages with only ServiceLevel components.
    private boolean m_CanDisplayWithOnlyServiceLevel = true;
    // Indicator for Packages with Required ServiceLevel components.
    private boolean m_CanDisplayWithRequiredServiceLevel = true;


    public AggrPackageCurrent() {
        initComponents();
        
        // Set Up Tree
        treePackage.setModelInfo(buildAccountPackagesTreeXMLDefinition());  
        treePackage.setCellRenderer(new ObjectStateTreeCellRenderer());
        treePackage.addTreeSelectionListener(this);
        treePackage.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                handleTreeMousePress(e);
            }
        });
    }

    public void addHyperlinkListener(javax.swing.event.HyperlinkListener listener) {
        velCurrentComponents.addHyperlinkListener(listener);    
    }

    public void setCanDisplayWithOnlyAccountLevel(boolean indicator) {
        // Indicate that Packages with only AccountLevel components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithOnlyAccountLevel = indicator;
    }

    public void setCanDisplayWithOnlyServiceLevel(boolean indicator) {
        // Indicate that Packages with only ServiceLevel components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithOnlyServiceLevel = indicator;
    }

    public void setCanDisplayWithRequiredServiceLevel(boolean indicator) {
        // Indicate that Packages with Required ServiceLevel Components should display Components for that Package.
        // If this indicator is set to false, none of the Components will be displayed for the Package.
        m_CanDisplayWithRequiredServiceLevel = indicator;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        spnlCurrent = new javax.swing.JSplitPane();
        spPackage = new javax.swing.JScrollPane();
        treePackage = new com.csgsystems.igpa.controls.CSGCollectionTree();
        velCurrentComponents = new com.csgsystems.igpa.controls.CSGVelocityHTMLEP();

        setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(645, 235));
        spnlCurrent.setBorder(null);
        spnlCurrent.setDividerLocation(475);
        spnlCurrent.setDividerSize(5);
        treePackage.setDomainName("Account");
        treePackage.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                treePackageTreeWillExpand(evt);
            }
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
        });

        spPackage.setViewportView(treePackage);

        spnlCurrent.setLeftComponent(spPackage);

        velCurrentComponents.setBorder(null);
        velCurrentComponents.setPreferredSize(new java.awt.Dimension(50, 50));
        velCurrentComponents.setVelocityTemplateUri("template/PackageCurrentComponents.vm");
        velCurrentComponents.setAutoscrolls(true);
        spnlCurrent.setRightComponent(velCurrentComponents);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(spnlCurrent, gridBagConstraints);

    }//GEN-END:initComponents

    private void treePackageTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_treePackageTreeWillExpand
        if (m_SingleEntityForPackage != null && "1".equals(m_SingleEntityForPackage)) {
            TreePath treePath = evt.getPath();
            if (treePath != null && treePath.getPathCount() == 2) {
                CollectionTreeNode node = (CollectionTreeNode)treePath.getLastPathComponent();
                if (node != null) {
                    IContext context = ctxFinder.findContext();
                    if (context != null) {
                        IPersistentObject account = node.getObject();
                        IPersistentCollection productPackageList = account.getCollection("ProductPackageList", "Account");
                        if (productPackageList != null) {
                            if (productPackageList.getAttributeDataAsBoolean("TransientIsExpanded") == true) {
                                return;
                            }
                            productPackageList.setAttributeDataAsBoolean("TransientIsExpanded", true);
                        }
                        IPersistentObject contextAccount = context.getObject("Account", null);
                        IPersistentObject service = context.getObject("Service", null);
                        if (m_CanDisplayWithOnlyAccountLevel && m_CanDisplayWithOnlyServiceLevel) {
                            contextAccount = null;
                            service = null;
                        }
                        UtilityOrderableObjects.setPackageFilterCriteria(account, contextAccount, service);
                    }
                }
            }
        }
    }//GEN-LAST:event_treePackageTreeWillExpand

    public void valueChanged(javax.swing.event.TreeSelectionEvent treeSelectionEvent) {
        TreePath treePath = treeSelectionEvent.getNewLeadSelectionPath();
        if (treePath != null && treePath.getPathCount() == 3) {
            TreePath selectedPath = treePackage.getSelectionPath();
            if (selectedPath != null) {
                CollectionTreeNode node = (CollectionTreeNode) selectedPath.getLastPathComponent();
                if (node != null) {
                    IPersistentObject pTargetDom = node.getObject();
                    if (pTargetDom == null) {
                        System.out.println("Could not Get ProductPackage from Tree");
                    } else {
        
                        // Create Package Component collection 
                        IPersistentCollection packageComponentDefList = (IPersistentCollection) PersistentObjectFactory.getFactory().createNew("PackageComponentDefList", "CurrentPackageComponents");
        
                        // Create search parameter
                        java.util.HashMap params = new java.util.HashMap();
                        QueryCriteria qc = new QueryCriteria();
                        qc.setFilterCriteria(FilterCriteria.createEquals(pTargetDom.getAttributeData("PackageId")));
                        params.put("PackageId", qc);
        
                        DomainUtility.setLanguageCodeFilter(params);

                        IPersistentObject pOrder = OrderManager.getInstance().getCurrentOrder();
                        if (pOrder != null) {
                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createLessThan(pOrder.getAttributeData("EffectiveDate")));
                            params.put("PackageActiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createGreaterThanEqual(pOrder.getAttributeData("EffectiveDate")));
                            qc.addFilterCriteria(FilterCriteria.createIsNull());
                            params.put("PackageInactiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createLessThan(pOrder.getAttributeData("EffectiveDate")));
                            params.put("ActiveDt", qc);

                            qc = new QueryCriteria();
                            qc.setFilterCriteria(FilterCriteria.createGreaterThanEqual(pOrder.getAttributeData("EffectiveDate")));
                            qc.addFilterCriteria(FilterCriteria.createIsNull());
                            params.put("InactiveDt", qc);
                        }
                        
                        qc = new QueryCriteria();
                        qc.setSortCriteria(new SortCriteria((short)0, true)); // Ascending sort
                        params.put("DisplayValue", qc);
                        
                        packageComponentDefList.setSearchParameters(params);
                        packageComponentDefList.reset();
        
                        // This indicates if there are ONLY AccountLevel components within this package          
                        boolean isAccountLevelOnly = true;
                        // This indicates if there are ONLY ServiceLevel components within this package          
                        boolean isServiceLevelOnly = true;
                        // This indicates if there are Required ServiceLevel components within this package          
                        boolean foundRequiredServiceLevel = false;

                        // If we can display everything, don't bother with this checking.  
                        if (!m_CanDisplayWithOnlyAccountLevel || !m_CanDisplayWithRequiredServiceLevel) {
                  
                            int count = packageComponentDefList.getCount();
                            for (int i=0; i<count; i++) {
                                IPersistentObject packageComponentDef = packageComponentDefList.getAt(i);
                                if (packageComponentDef != null) {
                                    int levelCode = packageComponentDef.getAttributeDataAsInteger("ComponentLevel");
                                    if (levelCode == 2) {
                                        // This package has a ServiceLevel only component within it,
                                        // therefore it is not an AccountLevel Only Package
                                        isAccountLevelOnly = false;

                                        // Check the Required ServiceLevel components
                                        int minRequired = packageComponentDef.getAttributeDataAsInteger("MinimumRequired");
                                        if (minRequired > 0 && !m_CanDisplayWithRequiredServiceLevel) {
                                            // This ServiceLevel component is Required but we're not supposed to
                                            // show Package Components with RequiredLevel components, so don't display any.
                                            foundRequiredServiceLevel = true;
                                        }
                                    } else {
                                        // This package has an AccountLevel component within it,
                                        // therefore it is not a ServiceLevel Only Package
                                        isServiceLevelOnly = false;
                                    }
                                }
                            }
                        }
            

                        IContext ctx = ctxFinder.findContext();
                        if (ctx != null) {
                            // Check to see if we can display Components for the Package that only have AccountLevel Components
                            // If we can't, then see if this is a Package that has only AccountLevel components and don't display if it is.
                            // Also, if we are not supposed to display Required ServiceLevel components, make sure there are none in the Package.
                            if ((m_CanDisplayWithOnlyAccountLevel && m_CanDisplayWithRequiredServiceLevel) ||
                                (!isServiceLevelOnly && !m_CanDisplayWithRequiredServiceLevel && !foundRequiredServiceLevel) ||
                                (!m_CanDisplayWithOnlyAccountLevel && !isAccountLevelOnly)) {
                                ctx.addTopic((IPersistentObject)packageComponentDefList);
                            } else {
                                ctx.removeTopic((IPersistentObject)packageComponentDefList);
                            }
                        }

                        velCurrentComponents.initializeControl();
                    }
                }
            }
        } else {
            IContext ctx = ctxFinder.findContext();
            if (ctx != null) {
                IPersistentCollection packageComponentDefList = ctx.getCollection("PackageComponentDefList", "CurrentPackageComponents");
                if (packageComponentDefList != null) {
                    ctx.removeTopic((IPersistentObject)packageComponentDefList);
                    velCurrentComponents.initializeControl();
                }
            }
        }
    }

    /**
     * Builds the xml definition for the Packages tree.
     * Created this way because we want to show the number of packages currently in the working set.
     */
    private String buildAccountPackagesTreeXMLDefinition() {

        // Format the header node to indicate the number of services currently in the working set.
        String headerString = "";
        IContext context = ctxFinder.findContext();
        if (context != null) {
            IPersistentObject account = ctxFinder.findContext().getObject("Account");
            IPersistentCollection accountList = null;
            if (account != null) {
                accountList = account.getCollection("AccountList", "Hierarchy");
            }
            if (account != null && accountList != null) {
                int totalFoundCount = accountList.executeFindCount();
                int count = accountList.getCount();
                if (totalFoundCount != count) {
                    headerString = ResourceManager.getInstance().formatStringResource("AggrPackageCurrent.text.AccountsPartial", new Object[] {new Integer(count), new Integer(totalFoundCount)});
                } else {
                    headerString = ResourceManager.getInstance().formatStringResource("AggrPackageCurrent.text.AccountsAll", new Object[] {new Integer(totalFoundCount)});
                }
            } else {
                headerString = ResourceManager.getString("AggrPackageCurrent.text.Accounts");
            }
        }

        String xmlDef = "<?xml version=\"1.0\"?>" +
                            "<csg-tree>" +
                                "<node>" +
                                    "<label static=\"" + headerString + "\" />" +
                                    "<children>" +
                                        "<data-set name=\"AccountList\" subtype=\"Hierarchy\">" +
                                            "<node>" +
                                                "<label column-formatter-name=\"com.csgsystems.domain.arbor.formatter.AccountDescriptionFormatter\" />" +
                                                "<children>" +
                                                    "<data-set name=\"ProductPackageList\" subtype=\"Account\">" +
                                                        "<node>" +
                                                            //"<label column-name=\"PackageId\" />" +
                                                            "<label column-formatter-name=\"com.csgsystems.domain.arbor.formatter.ProductPackageDescriptionFormatter\" />" +
                                                        "</node>" +
                                                    "</data-set>" +
                                                "</children>" +
                                            "</node>" +
                                        "</data-set>" +
                                    "</children>" +
                                "</node>" +
                            "</csg-tree>";
        return xmlDef;
    }

    private void handleTreeMousePress(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e)) {
            TreePath selectedPath = treePackage.getSelectionPath();
            if (selectedPath != null && selectedPath.getPathCount() == 1) {
                Object pathComponent = selectedPath.getPathComponent(0);
                if (pathComponent == treePackage.getModel().getRoot()) {
                    JPopupMenu menu = new JPopupMenu();
                    menu.add(new AbstractAction(ResourceManager.getString("AggrPackageCurrent.menuitem.ChangeWorkingSet")) {
                        public void actionPerformed(ActionEvent e) {
                            ctxFinder.fireActionForObject("hierarchy-workingset-dlg", ctxFinder.findContext().getObject("Account"));
                            treePackage.setModelInfo(buildAccountPackagesTreeXMLDefinition());
                            treePackage.initializeControl();
                        }
                    });
                    menu.show(treePackage, e.getX(), e.getY());
                }
            } else if (selectedPath != null && selectedPath.getPathCount() == 2) {
                if (m_SingleEntityForPackage != null && "1".equals(m_SingleEntityForPackage)) {
                    // We'll make sure that the tree branch is expanded before we allow the user to add to
                    // the collection, otherwise we'll get unwanted faulting and we'll drop the filtered stuff anyway.
                    if (treePackage.isExpanded(selectedPath) == true) {
                        JPopupMenu menu = new JPopupMenu();
                        menu.add(new AbstractAction(ResourceManager.getString("AggrPackageCurrent.menuitem.PackageSearch")) {
                            public void actionPerformed(ActionEvent e) {
                                performPackageSearch();
                            }
                        });
                        menu.show(treePackage, e.getX(), e.getY());
                    }
                }
            }
        }
    }

    private void performPackageSearch() {    
        IContext context = ctxFinder.findContext();
        if (context != null) {
            // We're using the SingletonManager to retrieve the Account that is to be changed.
            TreePath selectedPath = treePackage.getSelectionPath();
            if (selectedPath != null && selectedPath.getPathCount() == 2) {
                CollectionTreeNode node = (CollectionTreeNode)selectedPath.getLastPathComponent();
                if (node != null) {
                    IPersistentObject account = node.getObject();

                    IPersistentCollection productPackageList = account.getCollection("ProductPackageList", "Account");
                    ctxFinder.fireActionForObject("acct-package-single-entity-search-dlg", productPackageList);
                    
                    treePackage.initializeControl();
                }
            }
        }
    }

    public void contextFormStateChanged(ContextFormEvent contextFormEvent) {
        if (ContextFormEvent.POST_INIT_CONTROLS == contextFormEvent.getType() && !m_bHasBeenInitialized) {
            m_bHasBeenInitialized = true;

            IContext context = ctxFinder.findContext();
            if (context != null) {
                // If the SystemParameter is set, create the temporary collection and add as a topic to the context.
                MultiKeyParams mkp = BoptFactory.getSystemParameters();
                m_SingleEntityForPackage = (String)mkp.get("csr.SINGLE_ENTITY_FOR_PACKAGE");
                if (m_SingleEntityForPackage != null && "1".equals(m_SingleEntityForPackage) == true) {
                    // Setup additional Package searching collection
                    IPersistentObject productPackageList = PersistentObjectFactory.getFactory().createNew("ProductPackageList", "SingleEntityPackageSearch");
                    if (productPackageList != null) {
                        // Add our new object as a topic on our context
                        context.addTopic(productPackageList);
                    }
                }

                // Add the current account to the hierarchy.
                IPersistentObject account = context.getObject("Account", null);
                if (account != null) {

                    IPersistentCollection hierarchy = account.getCollection("AccountList", "Hierarchy");
                    if (hierarchy != null) {
                        if (hierarchy.getCount() == 0) {
                            Map message = new HashMap();
                            message.put("NewObject", account);
                            hierarchy.sendMessage("addToWorkingSet", message);
                        }
                    }
                }
            }
            
            // Need to re-initialize the tree after adding ... and before changing visible account, below
            treePackage.setModelInfo(buildAccountPackagesTreeXMLDefinition());
            treePackage.initializeControl();
            
            // Select the current account and make its packages visible to the user.
            if (context != null) {
                IPersistentObject account = ctxFinder.findContext().getObject("Account");
                if (account != null) {
                    CollectionTreeModel treeModel = (CollectionTreeModel)treePackage.getModel();
                    CollectionTreeNode root = (CollectionTreeNode) treeModel.getRoot();
                    int count = root.getChildCount();
                    for (int i=0; i<count; i++) {
                        CollectionTreeNode child = (CollectionTreeNode) root.getChild(i);
                        IPersistentObject childObject = child.getObject();
                        if (childObject != null) {
                            if (childObject.getId().isPartialMatch(account.getId())) {
                                TreePath treePath = new TreePath( new Object[] {root, child} );
                                treePackage.setSelectionPath(treePath);
                                //treePackage.fireTreeExpanded(treePath);
                                treePackage.scrollPathToVisible(treePath);
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane spPackage;
    private javax.swing.JSplitPane spnlCurrent;
    protected com.csgsystems.igpa.controls.CSGCollectionTree treePackage;
    private com.csgsystems.igpa.controls.CSGVelocityHTMLEP velCurrentComponents;
    // End of variables declaration//GEN-END:variables
    
}
