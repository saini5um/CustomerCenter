/*
 * AccountTerminate1.java
 *
 * Created on January 15, 2003, 3:29 PM
 */

package com.maxis.panel;
import java.util.HashMap;
import java.util.Map;

import com.csgsystems.bp.subsystems.AbstractHTMLPanel;
import com.csgsystems.igpa.utils.ContextFinder;
import com.csgsystems.igpa.forms.*;
import com.csgsystems.igpa.controls.BoundDataChangeListener;
import com.csgsystems.igpa.controls.BoundDataChangeEvent;
import com.csgsystems.localization.ResourceManager;
import com.csgsystems.domain.arbor.order.OrderManager;
import com.csgsystems.domain.framework.businessobject.IPersistentObject;
import com.csgsystems.domain.framework.context.IContext;
import com.csgsystems.domain.framework.attribute.AttributeEvent;
import com.csgsystems.domain.framework.attribute.IAttribute;
import com.csgsystems.domain.framework.attribute.AttributeListener;

import javax.swing.JOptionPane;
import com.maxis.util.*;
/**
 *
 * @author  schp01
 */
public class ServiceTransfer1 extends AbstractHTMLPanel implements ContextFormListener {
     /**
     *  Instance of the ContextFinder utility class, which can recursively
     *  search up the component hierarchy for an ICSGContextForm, and then
     *  retrieve its context (cached for later use).
     */
    private ContextFinder ctxFinder = new ContextFinder(this);

    private boolean isPrepaidEnvironment     = false;
    
    /** Creates new form AccountTerminate1 */
    public ServiceTransfer1() {
        initComponents();
        cSGVelocityHTML1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt){
                DetailHyperlinkFilter(evt, cSGVelocityHTML1);
            }
        });        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        lblReason = new com.csgsystems.igpa.controls.CSGLabel();
        lblTransferDate = new com.csgsystems.igpa.controls.CSGLabel();
        cbReason = new com.csgsystems.igpa.controls.CSGComboBox();
        edtTransferDate = new com.csgsystems.igpa.controls.CSGDateEdit();
        lblAnnotation = new com.csgsystems.igpa.controls.CSGLabel();
        edtTransferAccount = new com.csgsystems.igpa.controls.CSGEdit();
        lblTransferAccount = new com.csgsystems.igpa.controls.CSGLabel();
        btnTransferAccount = new com.csgsystems.igpa.controls.CSGButton();
        cSGComboBox1 = new com.csgsystems.igpa.controls.CSGComboBox();
        cSGVelocityHTML1 = new com.csgsystems.igpa.controls.CSGVelocityHTMLEP();
        pnlPostpaid = new javax.swing.JPanel();
        lblPostpaidAccount = new com.csgsystems.igpa.controls.CSGLabel();
        edtPostpaidRedirect = new com.csgsystems.igpa.controls.CSGEdit();
        cSGLabel1 = new com.csgsystems.igpa.controls.CSGLabel();
        jLabel121 = new javax.swing.JLabel();
        btnPostpaidRedirect = new com.csgsystems.igpa.controls.CSGButton();
        pnlPrepaid = new javax.swing.JPanel();
        lblBalance = new com.csgsystems.igpa.controls.CSGLabel();
        lblPrepaidAccount = new com.csgsystems.igpa.controls.CSGLabel();
        edtPrepaidRedirect = new com.csgsystems.igpa.controls.CSGEdit();
        jLabel14 = new javax.swing.JLabel();
        cSGLabel13 = new com.csgsystems.igpa.controls.CSGLabel();
        btnPrepaidRedirect = new com.csgsystems.igpa.controls.CSGButton();
        cbOpenItemId = new com.csgsystems.igpa.controls.CSGCollectionComboBox();

        setLayout(null);

        setPreferredSize(new java.awt.Dimension(750, 500));
        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(ResourceManager.getString( "ServiceTransfer1.borderTitle.ServiceTransferDetail" )));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 100));
        lblReason.setLocalizationKey("ServiceTransfer1.lblReason");
        jPanel1.add(lblReason);
        lblReason.setBounds(10, 20, 140, 20);

        lblTransferDate.setLocalizationKey("ServiceTransfer1.lblTransferDate");
        jPanel1.add(lblTransferDate);
        lblTransferDate.setBounds(10, 45, 140, 20);

        cbReason.setAttributeName("Reason");
        cbReason.setDomainName("ServiceTransfer");
        jPanel1.add(cbReason);
        cbReason.setBounds(150, 20, 160, 20);

        edtTransferDate.setAttributeName("TransferDate");
        edtTransferDate.setDomainName("ServiceTransfer");
        jPanel1.add(edtTransferDate);
        edtTransferDate.setBounds(150, 45, 160, 20);

        lblAnnotation.setLocalizationKey("ServiceTransfer1.lblAnnotation");
        jPanel1.add(lblAnnotation);
        lblAnnotation.setBounds(10, 95, 140, 20);

        edtTransferAccount.setEditable(false);
        edtTransferAccount.setAttributeName("TransferToAccountExternalId");
        edtTransferAccount.setDomainName("ServiceTransfer");
        jPanel1.add(edtTransferAccount);
        edtTransferAccount.setBounds(150, 70, 140, 20);

        lblTransferAccount.setLocalizationKey("ServiceTransfer1.lblTransferToAccount");
        jPanel1.add(lblTransferAccount);
        lblTransferAccount.setBounds(10, 70, 140, 20);

        btnTransferAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Find16.gif")));
        btnTransferAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransferAccountActionPerformed(evt);
            }
        });

        jPanel1.add(btnTransferAccount);
        btnTransferAccount.setBounds(290, 70, 20, 20);

        cSGComboBox1.setAtomName("Annotation");
        cSGComboBox1.setDomainName("ServiceTransfer");
        jPanel1.add(cSGComboBox1);
        cSGComboBox1.setBounds(150, 95, 160, 20);

        add(jPanel1);
        jPanel1.setBounds(420, 10, 320, 210);

        cSGVelocityHTML1.setBackground(new java.awt.Color(255, 255, 255));
        cSGVelocityHTML1.setVelocityTemplateUri("template/ServiceTransfer1.vm");
        add(cSGVelocityHTML1);
        cSGVelocityHTML1.setBounds(10, 10, 400, 470);

        pnlPostpaid.setLayout(null);

        pnlPostpaid.setBorder(new javax.swing.border.TitledBorder(ResourceManager.getString( "ServiceTransfer2.borderTitle.PostpaidCharges" )));
        lblPostpaidAccount.setLocalizationKey("ServiceTransfer2.lblRedirectPostpaid");
        pnlPostpaid.add(lblPostpaidAccount);
        lblPostpaidAccount.setBounds(10, 20, 290, 20);

        edtPostpaidRedirect.setEditable(false);
        edtPostpaidRedirect.setAttributeName("RedirectPostpaidChargesAccountExternalId");
        edtPostpaidRedirect.setDomainName("ServiceTransfer");
        pnlPostpaid.add(edtPostpaidRedirect);
        edtPostpaidRedirect.setBounds(150, 50, 140, 20);

        cSGLabel1.setLocalizationKey("ServiceTransfer2.label.Account");
        pnlPostpaid.add(cSGLabel1);
        cSGLabel1.setBounds(30, 45, 120, 20);

        jLabel121.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/csgsystems/bp/images/TreeOneBranch.gif")));
        pnlPostpaid.add(jLabel121);
        jLabel121.setBounds(20, 40, 10, 20);

        btnPostpaidRedirect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Find16.gif")));
        btnPostpaidRedirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPostpaidRedirectActionPerformed(evt);
            }
        });

        pnlPostpaid.add(btnPostpaidRedirect);
        btnPostpaidRedirect.setBounds(290, 50, 20, 20);

        add(pnlPostpaid);
        pnlPostpaid.setBounds(420, 220, 320, 80);

        pnlPrepaid.setLayout(null);

        pnlPrepaid.setBorder(new javax.swing.border.TitledBorder(ResourceManager.getString( "ServiceTransfer2.borderTitle.PrepaidCharges" )));
        lblBalance.setLocalizationKey("ServiceTransfer2.label.Balance");
        pnlPrepaid.add(lblBalance);
        lblBalance.setBounds(30, 70, 120, 20);

        lblPrepaidAccount.setLocalizationKey("ServiceTransfer2.lblRedirectPrepaid");
        pnlPrepaid.add(lblPrepaidAccount);
        lblPrepaidAccount.setBounds(10, 20, 290, 20);

        edtPrepaidRedirect.setEditable(false);
        edtPrepaidRedirect.setAttributeName("RedirectPrepaidChargesAccountExternalId");
        edtPrepaidRedirect.setDomainName("ServiceTransfer");
        edtPrepaidRedirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtPrepaidRedirectActionPerformed(evt);
            }
        });

        pnlPrepaid.add(edtPrepaidRedirect);
        edtPrepaidRedirect.setBounds(150, 40, 140, 20);

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/csgsystems/bp/images/TreeTwoBranch.gif")));
        jLabel14.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pnlPrepaid.add(jLabel14);
        jLabel14.setBounds(20, 40, 10, 70);

        cSGLabel13.setLocalizationKey("ServiceTransfer2.label.Account");
        pnlPrepaid.add(cSGLabel13);
        cSGLabel13.setBounds(30, 45, 120, 20);

        btnPrepaidRedirect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Find16.gif")));
        btnPrepaidRedirect.setEnabled(false);
        btnPrepaidRedirect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrepaidRedirectActionPerformed(evt);
            }
        });

        pnlPrepaid.add(btnPrepaidRedirect);
        btnPrepaidRedirect.setBounds(290, 40, 20, 20);

        cbOpenItemId.setAttributeName("RedirectPrepaidChargesOpenItemId");
        cbOpenItemId.setDomainName("ServiceTransfer");
        cbOpenItemId.setEnumCollectionName("AccountBalancesList");
        cbOpenItemId.setEnumCollectionSubtype("ServiceTransfer");
        cbOpenItemId.setEnumDisplayAttributeName("BalanceDesc");
        cbOpenItemId.setEnumKeyAttributeName("OpenItemId");
        pnlPrepaid.add(cbOpenItemId);
        cbOpenItemId.setBounds(150, 70, 150, 20);

        add(pnlPrepaid);
        pnlPrepaid.setBounds(420, 300, 320, 100);

    }//GEN-END:initComponents

    private void edtPrepaidRedirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtPrepaidRedirectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtPrepaidRedirectActionPerformed

    private void btnPrepaidRedirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrepaidRedirectActionPerformed
        fireAction(true);
    }//GEN-LAST:event_btnPrepaidRedirectActionPerformed

    private void btnPostpaidRedirectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPostpaidRedirectActionPerformed
        fireAction(false);
    }//GEN-LAST:event_btnPostpaidRedirectActionPerformed

    private void btnTransferAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransferAccountActionPerformed

        // display account search dialog
        ctxFinder.fireActionForObject("account-locate-finder-service-transfer-dlg", null);         
       
        // if invalid account
        IContext ctx = ctxFinder.findContext();
        if (ctx != null) {
            IPersistentObject serviceTransfer = ctx.getObject("ServiceTransfer",null);
            if (serviceTransfer != null){              
                IAttribute account = serviceTransfer.getAttribute("TransferToAccountExternalId");
                if (account.getError() != null ){                   
                    ctxFinder.displayError(account.getError());       
                } else {
                    ctxFinder.clearError();             
                }
                
                if (account.isEmpty()) {
                    serviceTransfer.getAttribute("RedirectPrepaidChargesAccountExternalId").setEmpty(true);
                    serviceTransfer.getAttribute("RedirectPrepaidChargesOpenItemId").setEmpty(true);
                    serviceTransfer.getAttribute("RedirectPostpaidChargesAccountExternalId").setEmpty(true);                      
                    btnPrepaidRedirect.setEnabled(false);  
                    btnPostpaidRedirect.setEnabled(false);  
                } else {
                    btnPrepaidRedirect.setEnabled(true);  
                    btnPostpaidRedirect.setEnabled(true);                      
                }
            }
        }      
           
        edtPrepaidRedirect.initializeControl();
        cbOpenItemId.initializeControl();
        edtPostpaidRedirect.initializeControl();                    
        edtTransferAccount.initializeControl();
        changeButtonState();        
    }//GEN-LAST:event_btnTransferAccountActionPerformed
    
    public void contextFormStateChanged(ContextFormEvent evt){
        // *********************
        // set defaults after screen is loaded for the first time (Post_open if it is a dialog, Ready if it is a view)
        // *********************   
        if (evt.getType() == ContextFormEvent.READY){
            
            // add a listener to the date control to enable/disable Ok button
            edtTransferDate.addBoundDataChangeListener(new BoundDataChangeListener() {
                    public void boundDataChanged(BoundDataChangeEvent bdce) {
                        changeButtonState();
                    }
                }); 
                 
            // add a listener to the account control to enable/disable Ok button 
            IContext ctx = ctxFinder.findContext();
            if (ctx != null) {
                IPersistentObject serviceTransfer = ctx.getObject("ServiceTransfer",null);
                if (serviceTransfer != null) {                                        
                    //
                    // Find out if the account is prepaid.
                    //
                    isPrepaidEnvironment  = false;
                    pnlPrepaid.setVisible(false);
                    if (serviceTransfer.getAttributeDataAsBoolean("IsPrepaid")) {
                      isPrepaidEnvironment = true;
                      pnlPrepaid.setVisible(true);
                      pnlPostpaid.setVisible(false);
                    } else {
                      isPrepaidEnvironment  = false;
                      pnlPrepaid.setVisible(false);
                      pnlPostpaid.setVisible(true);
                    }
                   
                    //
                    // Set event for TransferToAccount field.
                    //
                    IAttribute toAccount = serviceTransfer.getAttribute("TransferToAccountExternalId");
                    toAccount.addAttributeListener(new AttributeListener() {
                        public void attributeStateChanged(AttributeEvent evt) {                           
                            changeButtonState();                            
                        }
                    });
                    
                    if (toAccount.isEmpty()) {
                      btnPrepaidRedirect.setEnabled(false);  
                      btnPostpaidRedirect.setEnabled(false);                        
                    } else {
                      btnPrepaidRedirect.setEnabled(true);  
                      btnPostpaidRedirect.setEnabled(true);                          
                    }                    
                    
                    //
                    // Set event for RedirectPostpaidCharges field
                    //
                    IAttribute postpaidAccount = serviceTransfer.getAttribute("RedirectPostpaidChargesAccountExternalId");               
                    postpaidAccount.addAttributeListener(new AttributeListener() {
                        public void attributeStateChanged(AttributeEvent evt){
                            changeButtonState();                            
                        }
                    });                     
                    
                    //
                    // Set event for RedirectPrepaidCharges field
                    //
                    IAttribute prepaidAccount = serviceTransfer.getAttribute("RedirectPrepaidChargesAccountExternalId");
                    prepaidAccount.addAttributeListener(new AttributeListener() {
                        public void attributeStateChanged(AttributeEvent evt) {
                                cbOpenItemId.initializeControl();                          
                        }
                    });
                    
                    //
                    // Set event for RedirectOpenItemId field
                    //
                    IAttribute prepaidBalance = serviceTransfer.getAttribute("RedirectPrepaidChargesOpenItemId");
                    prepaidBalance.addAttributeListener(new AttributeListener() {                       
                        public void attributeStateChanged(AttributeEvent evt) {
                            changeButtonState();                            
                        }
                    });                        
                    

                    edtPrepaidRedirect.initializeControl();
                    cbOpenItemId.initializeControl();
                    edtPostpaidRedirect.initializeControl();
                    
                    changeButtonState();
                    
                    //Default the Service Suspend date; DENqa47462
                    // Retrieve the Current Order and get the EffectiveDate from it
                    if (serviceTransfer.getAttribute("TransferDate").isEmpty()) {
                        IPersistentObject order = OrderManager.getInstance().getCurrentOrder();
                        if (order != null) {
                            Map parms = new HashMap();
                            parms.put("clearDate", new Boolean(true));
                            order.sendMessage("resetEffectiveDate", parms);
                            edtTransferDate.setDate(order.getAttributeDataAsDate("EffectiveDateWithTimestamp"));
                            if (serviceTransfer.getError() != null) {
                                ctxFinder.displayError(serviceTransfer.getError());   
                            }
                        }
                    }
                }
                
                // cc P2
                cbReason.addBoundDataChangeListener(new BoundDataChangeListener() {
                        public void boundDataChanged(BoundDataChangeEvent bdce) {
//                            getAnnotationCd();
                        }
                    }); 
                IPersistentObject acct = ctx.getObject("Account");
                IPersistentObject service = ctx.getObject("Service");
                if ( MISMUtil.isSecondary(service) && MISMUtil.hasPrimary(acct)) {
                     JOptionPane.showMessageDialog(this, ResourceManager.getString("MISM.Secondary.Transfer.error"), 
                             "Alert!", JOptionPane.ERROR_MESSAGE);
                     cbReason.setEnabled(false);
                     edtTransferDate.setEnabled(false);
                     btnTransferAccount.setEnabled(false);
                     cSGComboBox1.setEnabled(false);
                } else if (MISMUtil.isPrimary(service) && MISMUtil.hasSecondary(acct)) {
                     // warning message
                     JOptionPane.showMessageDialog(this, ResourceManager.getString("MISM.Primary.Transfer.warning"), 
                             "Alert!", JOptionPane.WARNING_MESSAGE);
                }
            }
            
        }
    }

/*    private void getAnnotationCd(){
        com.maxis.xlogic.FXExtendedLogicFactory.getAnnotation(
            ctxFinder.findContext().getObject("ServiceTransfer",null), 
            "Reason", 
            "Annotation", 
            com.maxis.util.Constant.SERVICE_TRANSFER);
    }
*/
    private void changeButtonState() {
        IContext ctx = ctxFinder.findContext();
        IPersistentObject serviceTransfer = ctx.getObject("ServiceTransfer", null);

        if (serviceTransfer.getAttribute("Reason").isEmpty() ||
            serviceTransfer.getAttribute("TransferDate").isEmpty() ||
            serviceTransfer.getAttribute("TransferToAccountExternalId").isEmpty() ||
            (!isPrepaidEnvironment &&
              serviceTransfer.getAttribute("RedirectPostpaidChargesAccountExternalId").isEmpty()) ||
            (isPrepaidEnvironment && 
              (serviceTransfer.getAttribute("RedirectPrepaidChargesAccountExternalId").isEmpty() ||
               serviceTransfer.getAttribute("RedirectPrepaidChargesOpenItemId").isEmpty()))
            ) {
                
            // disable Next button
            ctxFinder.enableButton(ICSGContextForm.NEXT_BUTTON,false);              
        } else {
            // enable Next button
            ctxFinder.enableButton(ICSGContextForm.NEXT_BUTTON,true);
        }     
    }
        
    public void fireAction(boolean prepaid) {
        String action = null;
        String attribute = null;
        if (prepaid){
            action = "account-locate-finder-service-transfer-select-prepaid";
            attribute = "RedirectPrepaidChargesAccountExternalId";
        }else{
            action = "account-locate-finder-service-transfer-select-postpaid";        
            attribute = "RedirectPostpaidChargesAccountExternalId";            
        }
        // display account search dialog
        ctxFinder.fireActionForObject(action, null);         
        
        // if invalid account
        IContext ctx = ctxFinder.findContext();
        if (ctx != null) {
            IPersistentObject serviceTransfer = ctx.getObject("ServiceTransfer",null);
            if (serviceTransfer != null){              
                IAttribute account = serviceTransfer.getAttribute(attribute);
                if (account.getError() != null ){
                    ctxFinder.displayError(account.getError());  
                } else{
                    ctxFinder.clearError();                  
                }
            }
        } 
        
        if (prepaid){
            edtPrepaidRedirect.initializeControl();     
            cbOpenItemId.initializeControl();         
        } else {
            edtPostpaidRedirect.initializeControl();         
        }
        
        changeButtonState();
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.csgsystems.igpa.controls.CSGButton btnPostpaidRedirect;
    private com.csgsystems.igpa.controls.CSGButton btnPrepaidRedirect;
    private com.csgsystems.igpa.controls.CSGButton btnTransferAccount;
    private com.csgsystems.igpa.controls.CSGComboBox cSGComboBox1;
    private com.csgsystems.igpa.controls.CSGLabel cSGLabel1;
    private com.csgsystems.igpa.controls.CSGLabel cSGLabel13;
    private com.csgsystems.igpa.controls.CSGVelocityHTMLEP cSGVelocityHTML1;
    private com.csgsystems.igpa.controls.CSGCollectionComboBox cbOpenItemId;
    private com.csgsystems.igpa.controls.CSGComboBox cbReason;
    private com.csgsystems.igpa.controls.CSGEdit edtPostpaidRedirect;
    private com.csgsystems.igpa.controls.CSGEdit edtPrepaidRedirect;
    private com.csgsystems.igpa.controls.CSGEdit edtTransferAccount;
    private com.csgsystems.igpa.controls.CSGDateEdit edtTransferDate;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JPanel jPanel1;
    private com.csgsystems.igpa.controls.CSGLabel lblAnnotation;
    private com.csgsystems.igpa.controls.CSGLabel lblBalance;
    private com.csgsystems.igpa.controls.CSGLabel lblPostpaidAccount;
    private com.csgsystems.igpa.controls.CSGLabel lblPrepaidAccount;
    private com.csgsystems.igpa.controls.CSGLabel lblReason;
    private com.csgsystems.igpa.controls.CSGLabel lblTransferAccount;
    private com.csgsystems.igpa.controls.CSGLabel lblTransferDate;
    private javax.swing.JPanel pnlPostpaid;
    private javax.swing.JPanel pnlPrepaid;
    // End of variables declaration//GEN-END:variables
}
